# In the following paragraph, we eill count the number of words, total number of unique words, total number of 'to be' occurrances, number of each 'to be' word
sampleParagraph= 'Memory ordering is the order of accesses to computer memory by a CPU. The term can refer either to the memory ordering generated by the compiler during compile time, or to the memory ordering generated by a CPU during runtime. Execution effects are visible at two levels: within the program code at a high level, and at the machine level as viewed by other threads or processing elements in concurrent programming, or during debugging when using a hardware debugging aid with access to the machine state (some support for this is often built directly into the CPU or microcontroller as functionally independent circuitry apart from the execution core which continues to operate even when the core itself is halted for static inspection of its execution state). Compile-time memory order concerns itself with the former, and does not concern itself with these other views.'

#Total number of words
print('Total number of words:',sampleParagraph.count(' ')+1)

#Total number of unique words
setSampleParagraph= set(sampleParagraph)
print('Total number of unique words:',len(setSampleParagraph))

#total number of 'to be' occurrances
print("total number of 'to be' occurrances:",sampleParagraph.count('am')+sampleParagraph.count('is')+sampleParagraph.count('are')+sampleParagraph.count('was')+sampleParagraph.count('were'))

#number of each 'to be' word
print("number of 'am':", sampleParagraph.count('am') ,"\n number of 'is':", sampleParagraph.count('is'),"\n number of 'are':", sampleParagraph.count('are'),"\n number of 'was':", sampleParagraph.count('was'),"\n number of 'were':", sampleParagraph.count('were'))
